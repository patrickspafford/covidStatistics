{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/patrickspafford/Documents/gitRepos/covidApp/screens/dailyStats.js\";\nimport * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport { LineChart, BarChart, PieChart, ProgressChart } from 'react-native-chart-kit';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { ScrollView } from 'react-native-gesture-handler';\nvar styles = StyleSheet.create({\n  pageTitle: {\n    textAlign: 'center'\n  },\n  barChartTitle: {}\n});\nvar screenHeight = Dimensions.get(\"window\").height;\nexport default function dailyStats() {\n  var _React$useState = React.useState([\"AK\", \"AL\", \"AZ\"]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      states = _React$useState2[0],\n      setStates = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  var _React$useState5 = React.useState([\"0\", \"0\", \"0\"]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      cases = _React$useState6[0],\n      setCases = _React$useState6[1];\n\n  React.useEffect(function () {\n    function fetchData() {\n      var res;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(\"https://covidtracking.com/api/states\"));\n\n            case 2:\n              res = _context.sent;\n              res.json().then(function (res) {\n                var statesArray = [];\n                var casesArray = [];\n                res.forEach(function (info) {\n                  statesArray.push(info.state);\n                  casesArray.push(info.positive);\n                });\n                setStates(statesArray);\n                setCases(casesArray);\n                setLoading(false);\n              }).catch(function (err) {\n                return console.log(err);\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  });\n  var testData = {\n    labels: states,\n    datasets: [{\n      data: cases\n    }]\n  };\n  var chartConfig = {\n    backgroundGradientFrom: \"#ffffff\",\n    backgroundGradientFromOpacity: 1,\n    backgroundGradientTo: \"#ffffff\",\n    backgroundGradientToOpacity: 0.5,\n    fillShadowGradient: \"rgb(0, 0, 0)\",\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(0, 0, 0, \" + opacity + \")\";\n    },\n    strokeWidth: 2,\n    barPercentage: .8\n  };\n  return React.createElement(ScrollView, {\n    horizontal: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, !loading && React.createElement(BarChart, {\n    data: testData,\n    width: 2500,\n    height: screenHeight / 3,\n    chartConfig: chartConfig,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 26\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/patrickspafford/Documents/gitRepos/covidApp/screens/dailyStats.js"],"names":["WebBrowser","React","LineChart","BarChart","PieChart","ProgressChart","ScrollView","styles","StyleSheet","create","pageTitle","textAlign","barChartTitle","screenHeight","Dimensions","get","height","dailyStats","useState","states","setStates","loading","setLoading","cases","setCases","useEffect","fetchData","fetch","res","json","then","statesArray","casesArray","forEach","info","push","state","positive","catch","err","console","log","testData","labels","datasets","data","chartConfig","backgroundGradientFrom","backgroundGradientFromOpacity","backgroundGradientTo","backgroundGradientToOpacity","fillShadowGradient","color","opacity","strokeWidth","barPercentage"],"mappings":";;;AAAA,OAAO,KAAKA,UAAZ,MAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,QAA9B,EAAwCC,aAAxC,QAA6D,wBAA7D;;;;;;;;AAEA,SAASC,UAAT,QAA2B,8BAA3B;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,SAAS,EAAC;AACNC,IAAAA,SAAS,EAAE;AADL,GADmB;AAI7BC,EAAAA,aAAa,EAAE;AAJc,CAAlB,CAAf;AAUA,IAAMC,YAAY,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAA9C;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA,wBACLhB,KAAK,CAACiB,QAAN,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAf,CADK;AAAA;AAAA,MAC1BC,MAD0B;AAAA,MAClBC,SADkB;;AAAA,yBAEHnB,KAAK,CAACiB,QAAN,CAAe,IAAf,CAFG;AAAA;AAAA,MAE1BG,OAF0B;AAAA,MAEjBC,UAFiB;;AAAA,yBAGPrB,KAAK,CAACiB,QAAN,CAAe,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAf,CAHO;AAAA;AAAA,MAG1BK,KAH0B;AAAA,MAGnBC,QAHmB;;AAIjCvB,EAAAA,KAAK,CAACwB,SAAN,CAAiB,YAAM;AACnB,aAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsBC,KAAK,CAAC,sCAAD,CAD3B;;AAAA;AACUC,cAAAA,GADV;AAEIA,cAAAA,GAAG,CAACC,IAAJ,GACCC,IADD,CACM,UAAAF,GAAG,EAAI;AACb,oBAAIG,WAAW,GAAG,EAAlB;AACA,oBAAIC,UAAU,GAAG,EAAjB;AACAJ,gBAAAA,GAAG,CAACK,OAAJ,CAAY,UAAAC,IAAI,EAAI;AAChBH,kBAAAA,WAAW,CAACI,IAAZ,CAAiBD,IAAI,CAACE,KAAtB;AACAJ,kBAAAA,UAAU,CAACG,IAAX,CAAgBD,IAAI,CAACG,QAArB;AACH,iBAHD;AAIAjB,gBAAAA,SAAS,CAACW,WAAD,CAAT;AACAP,gBAAAA,QAAQ,CAACQ,UAAD,CAAR;AACAV,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACH,eAXG,EAYHgB,KAZG,CAYG,UAAAC,GAAG;AAAA,uBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,eAZN;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBJb,IAAAA,SAAS;AAER,GAnBD;AAoBA,MAAMgB,QAAQ,GAAG;AACbC,IAAAA,MAAM,EAAExB,MADK;AAEbyB,IAAAA,QAAQ,EAAE,CACN;AACIC,MAAAA,IAAI,EAAEtB;AADV,KADM;AAFG,GAAjB;AAQA,MAAMuB,WAAW,GAAG;AAChBC,IAAAA,sBAAsB,WADN;AAEhBC,IAAAA,6BAA6B,EAAE,CAFf;AAGhBC,IAAAA,oBAAoB,WAHJ;AAIhBC,IAAAA,2BAA2B,EAAE,GAJb;AAKhBC,IAAAA,kBAAkB,gBALF;AAMhBC,IAAAA,KAAK,EAAE;AAAA,UAACC,OAAD,uEAAW,CAAX;AAAA,gCAAkCA,OAAlC;AAAA,KANS;AAOhBC,IAAAA,WAAW,EAAE,CAPG;AAQhBC,IAAAA,aAAa,EAAE;AARC,GAApB;AAUA,SACI,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAClC,OAAD,IAAY,oBAAC,QAAD;AACT,IAAA,IAAI,EAAEqB,QADG;AAET,IAAA,KAAK,EAAE,IAFE;AAGT,IAAA,MAAM,EAAE7B,YAAY,GAAG,CAHd;AAIT,IAAA,WAAW,EAAEiC,WAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADjB,CADJ;AAUH","sourcesContent":["import * as WebBrowser from 'expo-web-browser';\nimport * as React from 'react';\nimport { LineChart, BarChart, PieChart, ProgressChart } from 'react-native-chart-kit'\nimport { Image, Platform, StyleSheet, Text, TouchableOpacity, View, Dimensions } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\n// import Axios from 'axios';\n\nconst styles = StyleSheet.create({\n    pageTitle:{\n        textAlign: 'center'\n    },\n    barChartTitle: {\n\n    }\n})\n\n\nconst screenHeight = Dimensions.get(\"window\").height;\n\nexport default function dailyStats() {\n    const [states, setStates] = React.useState([\"AK\", \"AL\", \"AZ\"])\n    const [loading, setLoading] = React.useState(true)\n    const [cases, setCases] = React.useState([\"0\", \"0\", \"0\"])\n    React.useEffect( () => {\n        async function fetchData() {\n            const res = await fetch(\"https://covidtracking.com/api/states\")\n            res.json()\n            .then(res => {\n            let statesArray = []\n            let casesArray = []\n            res.forEach(info => {\n                statesArray.push(info.state)\n                casesArray.push(info.positive)\n            })\n            setStates(statesArray)\n            setCases(casesArray) \n            setLoading(false) \n        })\n        .catch(err => console.log(err))\n        }\n    fetchData();\n        \n    })\n    const testData = {\n        labels: states,\n        datasets: [\n            {\n                data: cases\n            }\n        ]\n    } \n    const chartConfig = {\n        backgroundGradientFrom: `#ffffff`,\n        backgroundGradientFromOpacity: 1,\n        backgroundGradientTo: `#ffffff`,\n        backgroundGradientToOpacity: 0.5,\n        fillShadowGradient: `rgb(0, 0, 0)`,\n        color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\n        strokeWidth: 2, // optional, default 3\n        barPercentage: .8,\n    }\n    return (\n        <ScrollView horizontal={true}>\n            {!loading && <BarChart\n                data={testData}\n                width={2500}\n                height={screenHeight / 3}\n                chartConfig={chartConfig}\n            /> }\n        </ScrollView>\n    )\n}"]},"metadata":{},"sourceType":"module"}